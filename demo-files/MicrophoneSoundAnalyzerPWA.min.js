function MicrophoneSoundAnalyzerPWA(
  _topFrame,
  _libraryPath,
  _codebasePath,
  _inputParameters
) {
  var _model = EJSS_CORE.createAnimationLMS(),
    _view,
    _isPlaying = !1,
    _isPaused = !0,
    _isMobile =
      void 0 !== navigator &&
      navigator.userAgent.match(
        /iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i
      ),
    _stringProperties = {},
    _tools_showInputDialog = EJSS_INTERFACE.BoxPanel.showInputDialog,
    _tools_showOkDialog = EJSS_INTERFACE.BoxPanel.showOkDialog,
    _tools_showOkCancelDialog = EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    _tools_downloadText = EJSS_TOOLS.File.downloadText,
    _tools_uploadText = function (action) {
      EJSS_TOOLS.File.uploadText(_model, action);
    };
  function _play() {
    (_isPaused = !1), (_isPlaying = !0), _model.play();
  }
  function _pause() {
    (_isPaused = !0), (_isPlaying = !1), _model.pause();
  }
  function _step() {
    _pause(), _model.step();
  }
  function _reset() {
    _model.reset(),
      (_isPaused = _model.isPaused()),
      (_isPlaying = _model.isPlaying());
  }
  function _update() {
    _model.update();
  }
  function _initialize() {
    _model.initialize();
  }
  function _setFPS(_fps) {
    _model.setFPS(_fps);
  }
  function _setDelay(_delay) {
    _model.setDelay(_delay);
  }
  function _setStepsPerDisplay(_spd) {
    _model.setStepsPerDisplay(_spd);
  }
  function _setUpdateView(_updateView) {
    _model.setUpdateView(_updateView);
  }
  function _setAutoplay(_auto) {
    _model.setAutoplay(_auto);
  }
  function _println(_message) {
    console.log(_message);
  }
  function _breakAfterThisPage() {
    _model.setShouldBreak(!0);
  }
  function _resetSolvers() {
    _model.resetSolvers && _model.resetSolvers();
  }
  function _saveText(name, type, content) {
    _model.saveText && _model.saveText(name, type, content);
  }
  function _saveState(name) {
    _model.saveState && _model.saveState(name);
  }
  function _saveImage(name, panelname) {
    _model.saveImage && _model.saveImage(name, panelname);
  }
  function _readState(url, type) {
    _model.readState && _model.readState(url, type);
  }
  function _readText(url, type, varname) {
    _model.readText && _model.readText(url, type, varname);
  }
  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    return void 0 === _value ? propertyName : _value;
  }
  (_model._play = _play),
    (_model._pause = _pause),
    (_model._step = _step),
    (_model._reset = _reset);
  var __pagesEnabled = [],
    audioStream,
    audioCtx,
    npts,
    tVec,
    freqArray,
    maxDecibels,
    minDecibels,
    audioRate,
    baseFreq,
    maxFreq,
    minFreq,
    dataArray,
    dbArray,
    peakFreqArray,
    peakDBArray,
    peakValsXArray,
    peakValsYArray,
    peakValsArray,
    peakThreshold,
    hasMicrophone,
    allowMicrophone,
    counter,
    width,
    height,
    halfheight,
    showPeaks,
    showMeasure,
    measureStart,
    measureEnd,
    freqStart,
    freqEnd,
    msg,
    msg2,
    fontmenu,
    scale,
    titles,
    mobileDisplay,
    graphDisplay,
    myGutters;
  function _setPageEnabled(pageName, enabled) {
    __pagesEnabled[pageName] = enabled;
  }
  function _serialize() {
    return _model.serialize();
  }
  function _serializePublic() {
    return _model.serializePublic();
  }
  function _unserializePublic(json) {
    return _model.unserializePublic(json);
  }
  function _unserialize(json) {
    return _model.unserialize(json);
  }
  function getAudioStream() {
    hasMicrophone = !1;
    try {
      "https:" != window.location.protocol &&
        console.log("Insecure http may not be supported.  Use https."),
        navigator.mediaDevices
          .getUserMedia({ audio: !0, video: !1 })
          .then(function (stream) {
            (allowMicrophone = !0),
              (hasMicrophone = !0),
              (audioStream = stream);
          })
          .catch(function (err) {
            (msg2 = "Media devices promise err: " + err),
              console.error(msg2),
              (allowMicrophone = !1),
              (hasMicrophone = !1),
              (audioStream = void 0);
          });
    } catch (err) {
      (msg2 = "Media devices API err: " + err),
        console.error(msg2),
        (allowMicrophone = !1),
        (hasMicrophone = !1),
        (audioStream = void 0);
    }
  }
  function checkAudioAccess() {
    navigator.permissions.query({ name: "microphone" }).then(function (result) {
      "granted" == result.state
        ? console.log("have access")
        : "prompt" == result.state
        ? console.log("ask for access")
        : "denied" == result.state && console.log("no access"),
        (result.onchange = function () {
          console.log("access changed");
        });
    });
  }
  function initTimeVec(rate) {
    audioRate = rate;
    let dt = 1e3 / rate,
      ti = 0;
    for (let i = 0; i < tVec.length; i++) (tVec[i] = ti), (ti += dt);
    for (baseFreq = rate / freqArray.length, i = 0; i < freqArray.length; i++)
      freqArray[i] = (i * baseFreq) / 1e3;
  }
  function initArrays() {
    (freqArray = new Array(npts / 2)),
      (dbArray = new Array(npts / 2)),
      (peakArray = new Array(npts / 2).fill(minDecibels)),
      (dataArray = new Uint8Array(npts / 2)),
      (freqArray = new Array(npts / 2));
  }
  function closeAudio() {
    audioCtx
      ? audioCtx.close().then(function () {
          (audioCtx = void 0),
            (audioStream = void 0),
            tVec.length != npts &&
              ((tVec = new Array(npts)), (freqArray = new Array(npts / 2))),
            getAudioStream();
        })
      : ((audioCtx = void 0),
        (audioStream = void 0),
        tVec.length != npts &&
          ((tVec = new Array(npts)), (freqArray = new Array(npts / 2))),
        getAudioStream());
  }
  function playAudioContext() {
    audioCtx
      ? "suspended" === audioCtx.state &&
        audioCtx.resume().then(function () {
          console.log("recording resumed new state=" + audioCtx.state),
            (msg = ""),
            _play();
        })
      : (createAudioCtx(), (msg = ""), _play());
  }
  function pauseAudioContext() {
    _pause(),
      audioCtx &&
        "running" === audioCtx.state &&
        audioCtx.suspend().then(function () {
          _view._update();
        });
  }
  function createAudioCtx() {
    if (!audioStream) return void console.error("Audio stream is not defined.");
    initTimeVec(
      (audioCtx = new (window.AudioContext || window.webkitAudioContext)())
        .sampleRate
    );
    const analyser = audioCtx.createAnalyser();
    (analyser.minDecibels = minDecibels),
      (analyser.maxDecibels = maxDecibels),
      (analyser.smoothingTimeConstant = 0.85);
    const distortion = audioCtx.createWaveShaper(),
      gainNode = audioCtx.createGain(),
      biquadFilter = audioCtx.createBiquadFilter(),
      convolver = audioCtx.createConvolver(),
      source = audioCtx.createMediaStreamSource(audioStream);
    source.connect(analyser),
      analyser.connect(distortion),
      distortion.connect(biquadFilter),
      biquadFilter.connect(convolver),
      convolver.connect(gainNode),
      gainNode.connect(audioCtx.destination),
      (analyser.fftSize = npts),
      initArrays();
    const processor = audioCtx.createScriptProcessor(npts, 1, 1);
    source.connect(processor),
      processor.connect(audioCtx.destination),
      (processor.onaudioprocess = function (e) {
        if (_isPaused) return;
        counter++;
        let audioBuffer = e.inputBuffer;
        rate = audioBuffer.sampleRate;
        let audioVec = audioBuffer.getChannelData(0);
        for (
          _view.audioTrace.clear(),
            _view.audioTrace.addPoints(tVec, audioVec),
            counter < 0 &&
              (console.log(
                "CTXC sample rate=" +
                  audioCtx.sampleRate +
                  "  npts=" +
                  npts +
                  "  baseFreq=" +
                  baseFreq
              ),
              console.log("audioVec: " + audioVec),
              console.log("tVec: " + tVec)),
            analyser.getByteFrequencyData(dataArray),
            dbArray = Array.from(dataArray),
            i = 0;
          i < dataArray.length;
          i++
        )
          (dbArray[i] =
            minDecibels +
            (dbArray[i] / 255) * Math.abs(minDecibels - maxDecibels)),
            (freqArray[i] = (i * baseFreq) / 2e3);
        _view.fftTrace.clear(),
          _view.fftTrace.addPoints(freqArray, dbArray),
          findPeaks(freqArray, dbArray);
      });
  }
  // !
  function findPeaks(freqArray, dbArray) {
    let dpts = freqArray.length - 2,
      firstDer = new Array(dpts),
      secondtDer = new Array(dpts),
      df = freqArray[1] - freqArray[0],
      df2 = df * df;
    for (let i = 0; i < dpts; i++)
      (firstDer[i] = (10 * (dbArray[i + 1] - dbArray[i - 1])) / df),
        (secondtDer[i] =
          (dbArray[i + 1] + dbArray[i - 1] - 2 * dbArray[i]) / df2);
    (peakFreqArray = []),
      (peakDBArray = []),
      (peakValsArray = []),
      (peakValsXArray = []),
      (peakValsYArray = []);
    let plus = !1;
    for (let i = 1; i < dpts; i++) {
      let change;
      plus &&
        firstDer[i] < 0 &&
        secondtDer[i] < 100 &&
        (dbArray[i] > dbArray[i - 1]
          ? (peakFreqArray.push(freqArray[i]),
            peakDBArray.push(80 + dbArray[i]),
            dbArray[i] > peakThreshold &&
              (peakValsXArray.push(freqArray[i]),
              peakValsYArray.push(dbArray[i] + 2),
              peakValsArray.push(freqArray[i].toFixed(2))))
          : (peakFreqArray.push(freqArray[i - 1]),
            peakDBArray.push(80 + dbArray[i - 1]),
            dbArray[i - 1] > peakThreshold &&
              (peakValsXArray.push(freqArray[i - 1]),
              peakValsYArray.push(dbArray[i - 1] + 2),
              peakValsArray.push(freqArray[i - 1].toFixed(2))))),
        (plus = firstDer[i] > 0);
    }
  }
  function adjustTimeCursors() {
    if (measureStart > measureEnd) {
      let temp = measureStart;
      (measureStart = measureEnd), (measureEnd = temp);
    }
  }
  function adjustFreqCursors() {
    if (freqStart > freqEnd) {
      let temp = freqStart;
      (freqStart = freqEnd), (freqEnd = temp);
    }
  }
  function showHelp() {
    _view._showDocument("../pwahelp/index.html");
  }
  function testMediaStream(table) {
    try {
      navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia
        ? table.appendRow(["Navigator getUserMedia API= ", "supported"])
        : table.appendRow(["Navigator getUserMedia API= ", "not supported"]);
    } catch (err) {
      table.appendRow(["Navigator getUserMedia API= ", "not supported"]);
    }
    try {
      navigator.mediaDevices.getUserMedia
        ? table.appendRow(["Navigator mediaDevices API= ", "supported"])
        : table.appendRow(["Navigator mediaDevices API= ", "not supported"]);
    } catch (err) {
      table.appendRow(["Navigator mediaDevices API= ", "not supported"]);
    }
  }
  function requestAudioStream() {
    testMediaStream(_view.avDataTable),
      void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}),
      void 0 === navigator.mediaDevices.getUserMedia &&
        (navigator.mediaDevices.getUserMedia = function (constraints) {
          var getUserMedia =
            navigator.getUserMedia ||
            navigator.webkitGetUserMedia ||
            navigator.mozGetUserMedia ||
            navigator.msGetUserMedia;
          return getUserMedia
            ? new Promise(function (resolve, reject) {
                getUserMedia.call(navigator, constraints, resolve, reject);
              })
            : Promise.reject(
                new Error("getUserMedia is not implemented in this browser")
              );
        });
    try {
      navigator.mediaDevices
        .getUserMedia({ audio: !0, video: !1 })
        .then(function (stream) {
          (audioStream = stream),
            _view.avDataTable.appendRow(["Microphone access= ", "granted"]),
            _model.update(),
            _view._update();
        })
        .catch(function (err) {
          console.log("audio not found = " + err),
            (audioStream = void 0),
            _view.avDataTable.appendRow([
              "Microphone access = ",
              "not granted",
            ]),
            _model.update(),
            _view._update();
        });
    } catch (err) {
      console.error("Get User Media error: " + err),
        (audioStream = void 0),
        _view.avDataTable.appendRow(["Get User Media = ", "not supported"]),
        _model.update(),
        _view._update();
    }
    _model.update(), _view._update();
  }
  function _getViews() {
    var _viewsInfo = [],
      _counter = 0;
    return (
      (_viewsInfo[_counter++] = {
        name: "HtmlView Page",
        width: 800,
        height: 600,
      }),
      _viewsInfo
    );
  }
  function _selectView(_viewNumber) {
    _view = null;
    var _view_super_reset = (_view = new MicrophoneSoundAnalyzerPWA_View(
      _topFrame,
      _viewNumber,
      _libraryPath,
      _codebasePath
    ))._reset;
    (_view._reset = function () {
      switch ((_view_super_reset(), _viewNumber)) {
        case -10:
          break;
        default:
        case 0:
          _view._setRootProperty(_model, "OnBlur", function (_data, _info) {
            pauseAudioContext(), closeAudio();
          }),
            _view.tabbedPanel.linkProperty(
              "Height",
              function () {
                return height;
              },
              function (_v) {
                height = _v;
              }
            ),
            _view.tabbedPanel.linkProperty(
              "Width",
              function () {
                return width;
              },
              function (_v) {
                width = _v;
              }
            ),
            _view.tabbedPanel.linkProperty(
              "Titles",
              function () {
                return titles;
              },
              function (_v) {
                titles = _v;
              }
            ),
            _view.tabbedPanel.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.checkPanel.linkProperty("Visibility", function () {
              return !mobileDisplay || _isPaused;
            }),
            _view.checkPanel.linkProperty("Display", function () {
              return !mobileDisplay || _isPaused ? "block" : "none";
            }),
            _view.titleLabel2.linkProperty("Text", function () {
              return mobileDisplay
                ? "Sound Analyzer"
                : "Microphone Sound Analyzer PWA";
            }),
            _view.graphLabel.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.audioButton.linkProperty("Checked", function () {
              return 0 == graphDisplay;
            }),
            _view.audioButton.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.audioButton.setAction("OnCheckOn", function (_data, _info) {
              graphDisplay = 0;
            }),
            _view.freqButton.linkProperty("Checked", function () {
              return 1 == graphDisplay;
            }),
            _view.freqButton.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.freqButton.setAction("OnCheckOn", function (_data, _info) {
              graphDisplay = 1;
            }),
            _view.bothButton.linkProperty("Checked", function () {
              return 2 == graphDisplay;
            }),
            _view.bothButton.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.bothButton.setAction("OnCheckOn", function (_data, _info) {
              graphDisplay = 2;
            }),
            _view.mainPanel.linkProperty(
              "Width",
              function () {
                return width;
              },
              function (_v) {
                width = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "Height",
              function () {
                return halfheight;
              },
              function (_v) {
                halfheight = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "Width",
              function () {
                return width;
              },
              function (_v) {
                width = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "Gutters",
              function () {
                return myGutters;
              },
              function (_v) {
                myGutters = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "MaximumY",
              function () {
                return maxDecibels;
              },
              function (_v) {
                maxDecibels = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "MaximumX",
              function () {
                return maxFreq;
              },
              function (_v) {
                maxFreq = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "YFixedTick",
              function () {
                return minDecibels;
              },
              function (_v) {
                minDecibels = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "MinimumX",
              function () {
                return minFreq;
              },
              function (_v) {
                minFreq = _v;
              }
            ),
            _view.fftPanel.linkProperty(
              "MinimumY",
              function () {
                return minDecibels;
              },
              function (_v) {
                minDecibels = _v;
              }
            ),
            _view.fftPanel.linkProperty("XTickStep", function () {
              return maxFreq < 7 ? 0.5 : 2;
            }),
            _view.fftPanel.linkProperty("Visibility", function () {
              return 0 != graphDisplay;
            }),
            _view.fftPanel.linkProperty("Display", function () {
              return 0 != graphDisplay ? "block" : "none";
            }),
            _view.fftTrace.linkProperty(
              "Maximum",
              function () {
                return npts;
              },
              function (_v) {
                npts = _v;
              }
            ),
            _view.peakGroup.linkProperty("Visibility", function () {
              return showPeaks && peakValsArray && peakValsArray.length > 0;
            }),
            _view.peakSet.linkProperty("NumberOfElements", function () {
              return peakFreqArray.length;
            }),
            _view.peakSet.linkProperty(
              "X",
              function () {
                return peakFreqArray;
              },
              function (_v) {
                peakFreqArray = _v;
              }
            ),
            _view.peakSet.linkProperty(
              "Y",
              function () {
                return minDecibels;
              },
              function (_v) {
                minDecibels = _v;
              }
            ),
            _view.peakSet.linkProperty(
              "SizeY",
              function () {
                return peakDBArray;
              },
              function (_v) {
                peakDBArray = _v;
              }
            ),
            _view.fvaluesSet.linkProperty("NumberOfElements", function () {
              return peakValsArray.length;
            }),
            _view.fvaluesSet.linkProperty(
              "X",
              function () {
                return peakValsXArray;
              },
              function (_v) {
                peakValsXArray = _v;
              }
            ),
            _view.fvaluesSet.linkProperty(
              "Y",
              function () {
                return peakValsYArray;
              },
              function (_v) {
                peakValsYArray = _v;
              }
            ),
            _view.fvaluesSet.linkProperty(
              "Text",
              function () {
                return peakValsArray;
              },
              function (_v) {
                peakValsArray = _v;
              }
            ),
            _view.fvaluesSet.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.freqGroup.linkProperty(
              "Visibility",
              function () {
                return showMeasure;
              },
              function (_v) {
                showMeasure = _v;
              }
            ),
            _view.startFreqCursor.setAction(
              "OnRelease",
              function (_data, _info) {
                adjustFreqCursors();
              }
            ),
            _view.startFreqCursor.linkProperty(
              "X",
              function () {
                return freqStart;
              },
              function (_v) {
                freqStart = _v;
              }
            ),
            _view.endFreqCursor.setAction("OnRelease", function (_data, _info) {
              adjustFreqCursors();
            }),
            _view.endFreqCursor.linkProperty(
              "X",
              function () {
                return freqEnd;
              },
              function (_v) {
                freqEnd = _v;
              }
            ),
            _view.arrowFreq.linkProperty("SizeX", function () {
              return freqEnd - freqStart;
            }),
            _view.arrowFreq.linkProperty(
              "X",
              function () {
                return freqStart;
              },
              function (_v) {
                freqStart = _v;
              }
            ),
            _view.Df.linkProperty("X", function () {
              return (freqStart + freqEnd) / 2;
            }),
            _view.Df.linkProperty("Text", function () {
              return "Δf=" + (freqEnd - freqStart).toFixed(2) + " kHz";
            }),
            _view.audioPanel.linkProperty(
              "Height",
              function () {
                return halfheight;
              },
              function (_v) {
                halfheight = _v;
              }
            ),
            _view.audioPanel.linkProperty(
              "Width",
              function () {
                return width;
              },
              function (_v) {
                width = _v;
              }
            ),
            _view.audioPanel.linkProperty(
              "Gutters",
              function () {
                return myGutters;
              },
              function (_v) {
                myGutters = _v;
              }
            ),
            _view.audioPanel.linkProperty(
              "MaximumY",
              function () {
                return scale;
              },
              function (_v) {
                scale = _v;
              }
            ),
            _view.audioPanel.linkProperty("MaximumX", function () {
              return (1e3 * npts) / audioRate;
            }),
            _view.audioPanel.linkProperty("MinimumY", function () {
              return -scale;
            }),
            _view.audioPanel.linkProperty("Visibility", function () {
              return 1 != graphDisplay;
            }),
            _view.audioPanel.linkProperty(
              "BRMessage",
              function () {
                return msg;
              },
              function (_v) {
                msg = _v;
              }
            ),
            _view.audioPanel.linkProperty("Display", function () {
              return 1 != graphDisplay ? "block" : "none";
            }),
            _view.timeGroup.linkProperty(
              "Visibility",
              function () {
                return showMeasure;
              },
              function (_v) {
                showMeasure = _v;
              }
            ),
            _view.startTimeCursor.setAction(
              "OnRelease",
              function (_data, _info) {
                adjustTimeCursors();
              }
            ),
            _view.startTimeCursor.linkProperty(
              "X",
              function () {
                return measureStart;
              },
              function (_v) {
                measureStart = _v;
              }
            ),
            _view.endTimeCursor.setAction("OnRelease", function (_data, _info) {
              adjustTimeCursors();
            }),
            _view.endTimeCursor.linkProperty(
              "X",
              function () {
                return measureEnd;
              },
              function (_v) {
                measureEnd = _v;
              }
            ),
            _view.arrowTime.linkProperty("SizeX", function () {
              return measureEnd - measureStart;
            }),
            _view.arrowTime.linkProperty(
              "X",
              function () {
                return measureStart;
              },
              function (_v) {
                measureStart = _v;
              }
            ),
            _view.Dt.linkProperty("X", function () {
              return (measureStart + measureEnd) / 2;
            }),
            _view.Dt.linkProperty("Text", function () {
              return "Δt=" + (measureEnd - measureStart).toFixed(2) + " ms";
            }),
            _view.audioTrace.linkProperty(
              "Maximum",
              function () {
                return npts;
              },
              function (_v) {
                npts = _v;
              }
            ),
            _view.controlPanel.linkProperty(
              "Width",
              function () {
                return width;
              },
              function (_v) {
                width = _v;
              }
            ),
            _view.runPauseButton.setAction("OffClick", function (_data, _info) {
              pauseAudioContext(),
                closeAudio(),
                (titles = ["Analyzer", "About and Help"]);
            }),
            _view.runPauseButton.linkProperty("State", function () {
              return _isPaused;
            }),
            _view.runPauseButton.setAction("OnClick", function (_data, _info) {
              playAudioContext(), (titles = "");
            }),
            _view.resetButton.setAction("OnClick", function (_data, _info) {
              audioCtx
                ? audioCtx.close().then(function () {
                    _reset();
                  })
                : _reset();
            }),
            _view.measureCheck.linkProperty(
              "Checked",
              function () {
                return showMeasure;
              },
              function (_v) {
                showMeasure = _v;
              }
            ),
            _view.scaleFreqLabel.linkProperty("Text", function () {
              return mobileDisplay ? "Scale:" : "Amp Scale:";
            }),
            _view.scaleFreqLabel.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.scaleField.linkProperty(
              "Value",
              function () {
                return scale;
              },
              function (_v) {
                scale = _v;
              }
            ),
            _view.scaleField.setAction("OnChange", function (_data, _info) {
              (scale = Math.min(scale, 10)), (scale = Math.max(scale, 0.01));
            }),
            _view.scaleField.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.minDecible.linkProperty("Text", function () {
              return mobileDisplay ? "dB: min" : "Decible: min";
            }),
            _view.minDecible.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.minDecibleField.linkProperty(
              "Value",
              function () {
                return minDecibels;
              },
              function (_v) {
                minDecibels = _v;
              }
            ),
            _view.minDecibleField.setAction(
              "OnChange",
              function (_data, _info) {
                (minDecibels = Math.round(minDecibels)),
                  (minDecibels = Math.min(maxDecibels - 20, minDecibels)),
                  (minDecibels = Math.max(minDecibels, -100)),
                  (minDecibels = Math.min(minDecibels, -40));
              }
            ),
            _view.minDecibleField.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.maxDecible.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.maxDecibleField.linkProperty(
              "Value",
              function () {
                return maxDecibels;
              },
              function (_v) {
                maxDecibels = _v;
              }
            ),
            _view.maxDecibleField.setAction(
              "OnChange",
              function (_data, _info) {
                (maxDecibels = Math.round(maxDecibels)),
                  (maxDecibels = Math.max(maxDecibels, minDecibels + 20)),
                  (maxDecibels = Math.min(maxDecibels, 0)),
                  (maxDecibels = Math.max(maxDecibels, -60));
              }
            ),
            _view.maxDecibleField.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.peaksCheck.linkProperty(
              "Checked",
              function () {
                return showPeaks;
              },
              function (_v) {
                showPeaks = _v;
              }
            ),
            _view.peaksCheck.linkProperty("Text", function () {
              return mobileDisplay ? "Peaks" : "Show peaks:";
            }),
            _view.peaksCheck.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.thresholdDecible.linkProperty("Text", function () {
              return mobileDisplay ? "threshold" : "peak threshold";
            }),
            _view.thresholdDecible.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.thresholdField.linkProperty(
              "Value",
              function () {
                return peakThreshold;
              },
              function (_v) {
                peakThreshold = _v;
              }
            ),
            _view.thresholdField.setAction("OnChange", function (_data, _info) {
              (peakThreshold = Math.round(peakThreshold)),
                (peakThreshold = Math.max(peakThreshold, -100)),
                (peakThreshold = Math.min(peakThreshold, -20));
            }),
            _view.thresholdField.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.minFreqLabel.linkProperty("Text", function () {
              return mobileDisplay ? "kHz: min" : "    Frequency (kHz): min";
            }),
            _view.minFreqLabel.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.minFreqField.linkProperty(
              "Value",
              function () {
                return minFreq;
              },
              function (_v) {
                minFreq = _v;
              }
            ),
            _view.minFreqField.setAction("OnChange", function (_data, _info) {
              (minFreq = Math.min(minFreq, maxFreq - 2)),
                (minFreq = Math.max(minFreq, 0)),
                (freqStart = Math.min(freqStart, minFreq));
            }),
            _view.minFreqField.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.maxFreqLabel.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.maxFreqField.linkProperty(
              "Value",
              function () {
                return maxFreq;
              },
              function (_v) {
                maxFreq = _v;
              }
            ),
            _view.maxFreqField.setAction("OnChange", function (_data, _info) {
              (maxFreq = Math.max(maxFreq, minFreq + 2)),
                (maxFreq = Math.min(maxFreq, (npts * baseFreq) / 500)),
                (maxFreq = Math.min(maxFreq, 40)),
                (freqEnd = Math.min(freqEnd, maxFreq));
            }),
            _view.maxFreqField.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.ptsLabel.linkProperty("Text", function () {
              return mobileDisplay ? "#" : "# Points:";
            }),
            _view.ptsLabel.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.ptsBox.setAction("OnChange", function (_data, _info) {
              (npts = parseInt(_view.ptsBox.getSelectedOptions()[0])),
                (counter = 0);
              var opts = _view.ptsBox.getProperty("SelectedOptions"),
                option = opts.length > 0 ? opts[0] : "";
              _view.ptsBox.setSelectedOptions([option]),
                audioCtx
                  ? audioCtx.close().then(function () {
                      (audioCtx = void 0),
                        (audioStream = void 0),
                        (tVec = new Array(npts)),
                        (freqArray = new Array(npts / 2)),
                        _initialize();
                    })
                  : ((audioCtx = void 0),
                    (audioStream = void 0),
                    (tVec = new Array(npts)),
                    (freqArray = new Array(npts / 2)),
                    _initialize());
            }),
            _view.ptsBox.linkProperty("Disabled", function () {
              return !_isPaused;
            }),
            _view.ptsBox.linkProperty(
              "Font",
              function () {
                return fontmenu;
              },
              function (_v) {
                fontmenu = _v;
              }
            ),
            _view.mobileCheck.linkProperty(
              "Checked",
              function () {
                return mobileDisplay;
              },
              function (_v) {
                mobileDisplay = _v;
              }
            ),
            _view.avDataTable.linkProperty("HeadersText", function () {
              return ["Property", "Value"];
            }),
            _view.audioPermissioButton.setAction(
              "OnClick",
              function (_data, _info) {
                requestAudioStream();
              }
            );
      }
    }),
      _model.setView(_view),
      _model.reset(),
      _view._enableEPub();
  }
  return (
    (_model.getOdes = function () {
      return [];
    }),
    (_model.removeEvents = function () {}),
    (_model._userSerialize = function () {
      return {
        audioStream: audioStream,
        audioCtx: audioCtx,
        npts: npts,
        tVec: tVec,
        freqArray: freqArray,
        maxDecibels: maxDecibels,
        minDecibels: minDecibels,
        audioRate: audioRate,
        baseFreq: baseFreq,
        maxFreq: maxFreq,
        minFreq: minFreq,
        dataArray: dataArray,
        dbArray: dbArray,
        peakFreqArray: peakFreqArray,
        peakDBArray: peakDBArray,
        peakValsXArray: peakValsXArray,
        peakValsYArray: peakValsYArray,
        peakValsArray: peakValsArray,
        peakThreshold: peakThreshold,
        hasMicrophone: hasMicrophone,
        allowMicrophone: allowMicrophone,
        counter: counter,
        width: width,
        height: height,
        halfheight: halfheight,
        showPeaks: showPeaks,
        showMeasure: showMeasure,
        measureStart: measureStart,
        measureEnd: measureEnd,
        freqStart: freqStart,
        freqEnd: freqEnd,
        msg: msg,
        msg2: msg2,
        fontmenu: fontmenu,
        scale: scale,
        titles: titles,
        mobileDisplay: mobileDisplay,
        graphDisplay: graphDisplay,
        myGutters: myGutters,
      };
    }),
    (_model._userSerializePublic = function () {
      return {
        audioStream: audioStream,
        audioCtx: audioCtx,
        npts: npts,
        tVec: tVec,
        freqArray: freqArray,
        maxDecibels: maxDecibels,
        minDecibels: minDecibels,
        audioRate: audioRate,
        baseFreq: baseFreq,
        maxFreq: maxFreq,
        minFreq: minFreq,
        dataArray: dataArray,
        dbArray: dbArray,
        peakFreqArray: peakFreqArray,
        peakDBArray: peakDBArray,
        peakValsXArray: peakValsXArray,
        peakValsYArray: peakValsYArray,
        peakValsArray: peakValsArray,
        peakThreshold: peakThreshold,
        hasMicrophone: hasMicrophone,
        allowMicrophone: allowMicrophone,
        counter: counter,
        width: width,
        height: height,
        halfheight: halfheight,
        showPeaks: showPeaks,
        showMeasure: showMeasure,
        measureStart: measureStart,
        measureEnd: measureEnd,
        freqStart: freqStart,
        freqEnd: freqEnd,
        msg: msg,
        msg2: msg2,
        fontmenu: fontmenu,
        scale: scale,
        titles: titles,
        mobileDisplay: mobileDisplay,
        graphDisplay: graphDisplay,
        myGutters: myGutters,
      };
    }),
    (_model._readParameters = function (json) {
      void 0 !== json.audioStream && (audioStream = json.audioStream),
        void 0 !== json.audioCtx && (audioCtx = json.audioCtx),
        void 0 !== json.npts && (npts = json.npts),
        void 0 !== json.tVec && (tVec = json.tVec),
        void 0 !== json.freqArray && (freqArray = json.freqArray),
        void 0 !== json.maxDecibels && (maxDecibels = json.maxDecibels),
        void 0 !== json.minDecibels && (minDecibels = json.minDecibels),
        void 0 !== json.audioRate && (audioRate = json.audioRate),
        void 0 !== json.baseFreq && (baseFreq = json.baseFreq),
        void 0 !== json.maxFreq && (maxFreq = json.maxFreq),
        void 0 !== json.minFreq && (minFreq = json.minFreq),
        void 0 !== json.dataArray && (dataArray = json.dataArray),
        void 0 !== json.dbArray && (dbArray = json.dbArray),
        void 0 !== json.peakFreqArray && (peakFreqArray = json.peakFreqArray),
        void 0 !== json.peakDBArray && (peakDBArray = json.peakDBArray),
        void 0 !== json.peakValsXArray &&
          (peakValsXArray = json.peakValsXArray),
        void 0 !== json.peakValsYArray &&
          (peakValsYArray = json.peakValsYArray),
        void 0 !== json.peakValsArray && (peakValsArray = json.peakValsArray),
        void 0 !== json.peakThreshold && (peakThreshold = json.peakThreshold),
        void 0 !== json.hasMicrophone && (hasMicrophone = json.hasMicrophone),
        void 0 !== json.allowMicrophone &&
          (allowMicrophone = json.allowMicrophone),
        void 0 !== json.counter && (counter = json.counter),
        void 0 !== json.width && (width = json.width),
        void 0 !== json.height && (height = json.height),
        void 0 !== json.halfheight && (halfheight = json.halfheight),
        void 0 !== json.showPeaks && (showPeaks = json.showPeaks),
        void 0 !== json.showMeasure && (showMeasure = json.showMeasure),
        void 0 !== json.measureStart && (measureStart = json.measureStart),
        void 0 !== json.measureEnd && (measureEnd = json.measureEnd),
        void 0 !== json.freqStart && (freqStart = json.freqStart),
        void 0 !== json.freqEnd && (freqEnd = json.freqEnd),
        void 0 !== json.msg && (msg = json.msg),
        void 0 !== json.msg2 && (msg2 = json.msg2),
        void 0 !== json.fontmenu && (fontmenu = json.fontmenu),
        void 0 !== json.scale && (scale = json.scale),
        void 0 !== json.titles && (titles = json.titles),
        void 0 !== json.mobileDisplay && (mobileDisplay = json.mobileDisplay),
        void 0 !== json.graphDisplay && (graphDisplay = json.graphDisplay),
        void 0 !== json.myGutters && (myGutters = json.myGutters);
    }),
    (_model._readParametersPublic = function (json) {
      void 0 !== json.audioStream && (audioStream = json.audioStream),
        void 0 !== json.audioCtx && (audioCtx = json.audioCtx),
        void 0 !== json.npts && (npts = json.npts),
        void 0 !== json.tVec && (tVec = json.tVec),
        void 0 !== json.freqArray && (freqArray = json.freqArray),
        void 0 !== json.maxDecibels && (maxDecibels = json.maxDecibels),
        void 0 !== json.minDecibels && (minDecibels = json.minDecibels),
        void 0 !== json.audioRate && (audioRate = json.audioRate),
        void 0 !== json.baseFreq && (baseFreq = json.baseFreq),
        void 0 !== json.maxFreq && (maxFreq = json.maxFreq),
        void 0 !== json.minFreq && (minFreq = json.minFreq),
        void 0 !== json.dataArray && (dataArray = json.dataArray),
        void 0 !== json.dbArray && (dbArray = json.dbArray),
        void 0 !== json.peakFreqArray && (peakFreqArray = json.peakFreqArray),
        void 0 !== json.peakDBArray && (peakDBArray = json.peakDBArray),
        void 0 !== json.peakValsXArray &&
          (peakValsXArray = json.peakValsXArray),
        void 0 !== json.peakValsYArray &&
          (peakValsYArray = json.peakValsYArray),
        void 0 !== json.peakValsArray && (peakValsArray = json.peakValsArray),
        void 0 !== json.peakThreshold && (peakThreshold = json.peakThreshold),
        void 0 !== json.hasMicrophone && (hasMicrophone = json.hasMicrophone),
        void 0 !== json.allowMicrophone &&
          (allowMicrophone = json.allowMicrophone),
        void 0 !== json.counter && (counter = json.counter),
        void 0 !== json.width && (width = json.width),
        void 0 !== json.height && (height = json.height),
        void 0 !== json.halfheight && (halfheight = json.halfheight),
        void 0 !== json.showPeaks && (showPeaks = json.showPeaks),
        void 0 !== json.showMeasure && (showMeasure = json.showMeasure),
        void 0 !== json.measureStart && (measureStart = json.measureStart),
        void 0 !== json.measureEnd && (measureEnd = json.measureEnd),
        void 0 !== json.freqStart && (freqStart = json.freqStart),
        void 0 !== json.freqEnd && (freqEnd = json.freqEnd),
        void 0 !== json.msg && (msg = json.msg),
        void 0 !== json.msg2 && (msg2 = json.msg2),
        void 0 !== json.fontmenu && (fontmenu = json.fontmenu),
        void 0 !== json.scale && (scale = json.scale),
        void 0 !== json.titles && (titles = json.titles),
        void 0 !== json.mobileDisplay && (mobileDisplay = json.mobileDisplay),
        void 0 !== json.graphDisplay && (graphDisplay = json.graphDisplay),
        void 0 !== json.myGutters && (myGutters = json.myGutters);
    }),
    (_model._userUnserializePublic = function (json) {
      _model._readParametersPublic(json), _resetSolvers(), _model.update();
    }),
    (_model._userUnserialize = function (json) {
      _model._readParameters(json), _resetSolvers(), _model.update();
    }),
    _model.addToReset(function () {
      (__pagesEnabled["Switch Tabs"] = !0),
        (__pagesEnabled["Init Microphone"] = !0),
        (__pagesEnabled["Init Size"] = !0),
        (__pagesEnabled["Adjust Height"] = !0);
    }),
    _model.addToReset(function () {
      (audioStream = void 0),
        (audioCtx = void 0),
        (npts = 1024),
        (tVec = new Array(npts)),
        (function () {
          var _i0;
          for (_i0 = 0; _i0 < npts; _i0 += 1) tVec[_i0] = 0;
        })(),
        (freqArray = new Array(npts / 2)),
        (function () {
          var _i0;
          for (_i0 = 0; _i0 < npts / 2; _i0 += 1) freqArray[_i0] = 0;
        })(),
        (maxDecibels = -20),
        (minDecibels = -80),
        (baseFreq = (audioRate = 44100) / npts),
        (maxFreq = 10),
        (minFreq = 0),
        (dataArray = []),
        (dbArray = []),
        (peakFreqArray = []),
        (peakDBArray = []),
        (peakValsXArray = []),
        (peakValsYArray = []),
        (peakValsArray = []),
        (peakThreshold = -68);
    }),
    _model.addToReset(function () {
      (hasMicrophone = !1),
        (allowMicrophone = !1),
        (counter = 0),
        (width = 900),
        (halfheight = (height = 600) / 2),
        (showPeaks = !0),
        (showMeasure = !1),
        (measureStart = (384 * npts) / audioRate),
        (measureEnd = (640 * npts) / audioRate),
        (freqStart = 4),
        (freqEnd = 6),
        (msg = "Requesting microphone access."),
        (msg2 = ""),
        (fontmenu = "normal normal 1em "),
        (scale = 0.25),
        (titles = ["Analyzer", "About and Help"]),
        (mobileDisplay = !1),
        (graphDisplay = 2),
        (myGutters = [55, 45, 25, 45]);
    }),
    _inputParameters &&
      (_inputParameters = _model.parseInputParameters(_inputParameters)) &&
      _model.addToReset(function () {
        _model._readParameters(_inputParameters);
      }),
    _model.addToReset(function () {
      _model.setAutoplay(!1), _model.setFPS(10), _model.setStepsPerDisplay(1);
    }),
    (_model.showHelpFunction = showHelp),
    _model.addToInitialization(function () {
      __pagesEnabled["Switch Tabs"] &&
        document
          .getElementById("tabbedPanel.ul")
          .addEventListener("click", function (evt) {
            var source = evt.srcElement || evt.originalTarget;
            evt.stopPropagation(),
              console.log("id=" + source.id),
              "tabbedPanel.item.a.1" === source.id &&
                (console.log("stop now"), pauseAudioContext(), closeAudio());
          });
    }),
    _model.addToInitialization(function () {
      __pagesEnabled["Init Microphone"] &&
        ((peakFreqArray = []),
        (peakDBArray = []),
        (peakValsArray = []),
        (peakValsXArray = []),
        (peakValsYArray = []),
        audioCtx
          ? audioCtx.close().then(function () {
              (audioCtx = void 0), getAudioStream();
            })
          : (getAudioStream(), (msg = "Press play button to start.")));
    }),
    _model.addToInitialization(function () {
      if (__pagesEnabled["Init Size"]) {
        myGutters = mobileDisplay ? [55, 10, 5, 45] : [55, 45, 25, 45];
        var rect2 = document
            .getElementById("controlPanel")
            .getBoundingClientRect(),
          rect3 = document.getElementById("checkPanel").getBoundingClientRect();
        (width = 0.9 * window.innerWidth),
          (width = Math.max(width, 100)),
          (height =
            0.9 * window.innerHeight - rect2.height - rect3.height - 10),
          (height = Math.max(height, 100)),
          (halfheight = 2 == graphDisplay ? height / 2 : height);
      }
    }),
    _model.addToFixedRelations(function () {
      (_isPaused = _model.isPaused()), (_isPlaying = _model.isPlaying());
    }),
    _model.addToFixedRelations(function () {
      if (__pagesEnabled["Adjust Height"]) {
        myGutters = mobileDisplay ? [55, 10, 5, 45] : [55, 45, 25, 45];
        var rect2 = document
            .getElementById("controlPanel")
            .getBoundingClientRect(),
          rect3 = document.getElementById("checkPanel").getBoundingClientRect();
        (width = 0.9 * window.innerWidth),
          (width = Math.max(width, 100)),
          (height =
            0.9 * window.innerHeight - rect2.height - rect3.height - 10),
          (height = Math.max(height, 100)),
          (halfheight = 2 == graphDisplay ? height / 2 : height);
      }
    }),
    _model.addToFixedRelations(function () {
      (_isPaused = _model.isPaused()), (_isPlaying = _model.isPlaying());
    }),
    (_model._fontResized = function (iBase, iSize, iDelta) {
      _view._fontResized(iBase, iSize, iDelta);
    }),
    _model.setAutoplay(!1),
    _model.setFPS(10),
    _model.setStepsPerDisplay(1),
    _selectView(_model._autoSelectView(_getViews())),
    _model
  );
}
function MicrophoneSoundAnalyzerPWA_View(
  _topFrame,
  _viewNumber,
  _libraryPath,
  _codebasePath
) {
  var _view;
  switch (_viewNumber) {
    case -10:
      break;
    default:
    case 0:
      _view = MicrophoneSoundAnalyzerPWA_View_0(_topFrame);
  }
  return (
    _codebasePath && _view._setResourcePath(_codebasePath),
    _libraryPath && _view._setLibraryPath(_libraryPath),
    _view._addDescriptionPage(
      "Microphone Sound Analyzer",
      "./MicrophoneSoundAnalyzerPWA_Intro_1.html"
    ),
    _view
  );
}
function MicrophoneSoundAnalyzerPWA_View_0(_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);
  return (
    (_view._reset = function () {
      _view._clearAll(),
        _view
          ._addElement(
            EJSS_INTERFACE.tabbedPanel,
            "tabbedPanel",
            _view._topFrame
          )
          .setProperty("FillColor", "Pink")
          .setProperty("CSS", { "margin-top": "0px", "margin-bottom": "0px" })
          .setProperty("BorderStyle", "solid")
          .setProperty("BorderColor", "LightGray")
          .setProperty("BorderWidth", 1),
        _view
          ._addElement(EJSS_INTERFACE.panel, "appPanel", _view.tabbedPanel)
          .setProperty("Width", "100%"),
        _view._addElement(EJSS_INTERFACE.panel, "checkPanel", _view.appPanel),
        _view
          ._addElement(EJSS_INTERFACE.panel, "graphDisplay", _view.checkPanel)
          .setProperty("Display", "inline-block"),
        _view
          ._addElement(
            EJSS_INTERFACE.imageAndTextButton,
            "titleLabel2",
            _view.graphDisplay
          )
          .setProperty("Foreground", "red")
          .setProperty("Font", "normal bold 16px "),
        _view
          ._addElement(
            EJSS_INTERFACE.imageAndTextButton,
            "graphLabel",
            _view.graphDisplay
          )
          .setProperty("Text", "Show:"),
        _view
          ._addElement(
            EJSS_INTERFACE.radioButton,
            "audioButton",
            _view.graphDisplay
          )
          .setProperty("Text", "audio"),
        _view
          ._addElement(
            EJSS_INTERFACE.radioButton,
            "freqButton",
            _view.graphDisplay
          )
          .setProperty("Text", "freq."),
        _view
          ._addElement(
            EJSS_INTERFACE.radioButton,
            "bothButton",
            _view.graphDisplay
          )
          .setProperty("Text", "both"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "mainPanel", _view.appPanel)
          .setProperty("CSS", { display: "block" })
          .setProperty("Display", "block"),
        _view
          ._addElement(
            EJSS_DRAWING2D.plottingPanel,
            "fftPanel",
            _view.mainPanel
          )
          .setProperty("YScalePrecision", 0)
          .setProperty("XFixedTick", 0)
          .setProperty("Title", "Frequency Spectrum")
          .setProperty("Enabled", !0)
          .setProperty("SquareAspect", !1)
          .setProperty("YAutoTicks", !1)
          .setProperty("TitleY", "audio level (dB)")
          .setProperty("YTickStep", 10)
          .setProperty("AutoScaleY", !0)
          .setProperty("TitleX", "f (kHz)")
          .setProperty("AutoScaleX", !1)
          .setProperty("XAutoTicks", !1)
          .setProperty("XScalePrecision", 1),
        _view
          ._addElement(EJSS_DRAWING2D.trace, "fftTrace", _view.fftPanel)
          .setProperty("LineColor", "Blue")
          .setProperty("DrawLines", !0)
          .setProperty("NoRepeat", !1)
          .setProperty("LineWidth", 2),
        _view._addElement(EJSS_DRAWING2D.group, "peakGroup", _view.fftPanel),
        _view
          ._addElement(EJSS_DRAWING2D.arrowSet, "peakSet", _view.peakGroup)
          .setProperty("MarkEnd", "POINTED")
          .setProperty("SizeX", 0)
          .setProperty("LineColor", "DarkGray")
          .setProperty("LineWidth", 2)
          .setProperty("Offset", "SOUTH_WEST"),
        _view
          ._addElement(EJSS_DRAWING2D.textSet, "fvaluesSet", _view.peakGroup)
          .setProperty("RelativePosition", "NORTH")
          .setProperty("Measured", !0),
        _view._addElement(EJSS_DRAWING2D.group, "freqGroup", _view.fftPanel),
        _view
          ._addElement(
            EJSS_DRAWING2D.cursor,
            "startFreqCursor",
            _view.freqGroup
          )
          .setProperty("Sensitivity", 8)
          .setProperty("LineColor", "Magenta")
          .setProperty("Y", 0)
          .setProperty("CursorType", "VERTICAL")
          .setProperty("LineWidth", 2)
          .setProperty("EnabledPosition", "ENABLED_X"),
        _view
          ._addElement(EJSS_DRAWING2D.cursor, "endFreqCursor", _view.freqGroup)
          .setProperty("Sensitivity", 8)
          .setProperty("LineColor", "Magenta")
          .setProperty("Y", 0)
          .setProperty("CursorType", "VERTICAL")
          .setProperty("LineWidth", 2)
          .setProperty("EnabledPosition", "ENABLED_X"),
        _view._addElement(
          EJSS_DRAWING2D.group,
          "arrowFreqGroup",
          _view.freqGroup
        ),
        _view
          ._addElement(EJSS_DRAWING2D.arrow, "arrowFreq", _view.arrowFreqGroup)
          .setProperty("MarkEnd", "ANGLE")
          .setProperty("MovesGroup", !0)
          .setProperty("Measured", !1)
          .setProperty("MarkStart", "INVANGLE")
          .setProperty("Y", -40)
          .setProperty("SizeY", 0)
          .setProperty("EnabledPosition", "ENABLED_Y"),
        _view
          ._addElement(EJSS_DRAWING2D.text, "Df", _view.arrowFreqGroup)
          .setProperty("MovesGroup", !0)
          .setProperty("RelativePosition", "NORTH")
          .setProperty("Measured", !0)
          .setProperty("Y", -34)
          .setProperty("EnabledPosition", "ENABLED_Y"),
        _view
          ._addElement(
            EJSS_DRAWING2D.plottingPanel,
            "audioPanel",
            _view.mainPanel
          )
          .setProperty("XFixedTick", 0)
          .setProperty("Title", "Microphone Signal")
          .setProperty("Enabled", !0)
          .setProperty("MinimumX", 0)
          .setProperty("XTickStep", 10)
          .setProperty("TitleY", "amplitude")
          .setProperty("AutoScaleY", !0)
          .setProperty("TitleX", "t (ms)")
          .setProperty("AutoScaleX", !0),
        _view._addElement(EJSS_DRAWING2D.group, "timeGroup", _view.audioPanel),
        _view
          ._addElement(
            EJSS_DRAWING2D.cursor,
            "startTimeCursor",
            _view.timeGroup
          )
          .setProperty("Sensitivity", 8)
          .setProperty("LineColor", "Magenta")
          .setProperty("Y", 0)
          .setProperty("CursorType", "VERTICAL")
          .setProperty("LineWidth", 2)
          .setProperty("EnabledPosition", "ENABLED_X"),
        _view
          ._addElement(EJSS_DRAWING2D.cursor, "endTimeCursor", _view.timeGroup)
          .setProperty("Sensitivity", 8)
          .setProperty("LineColor", "Magenta")
          .setProperty("Y", 0)
          .setProperty("CursorType", "VERTICAL")
          .setProperty("LineWidth", 2)
          .setProperty("EnabledPosition", "ENABLED_X"),
        _view._addElement(
          EJSS_DRAWING2D.group,
          "arrowTimeGroup",
          _view.timeGroup
        ),
        _view
          ._addElement(EJSS_DRAWING2D.arrow, "arrowTime", _view.arrowTimeGroup)
          .setProperty("MarkEnd", "ANGLE")
          .setProperty("MovesGroup", !0)
          .setProperty("Measured", !1)
          .setProperty("MarkStart", "INVANGLE")
          .setProperty("Y", 0)
          .setProperty("SizeY", 0)
          .setProperty("EnabledPosition", "ENABLED_Y"),
        _view
          ._addElement(EJSS_DRAWING2D.text, "Dt", _view.arrowTimeGroup)
          .setProperty("MovesGroup", !0)
          .setProperty("Measured", !1)
          .setProperty("Y", 0.1)
          .setProperty("EnabledPosition", "ENABLED_Y"),
        _view
          ._addElement(EJSS_DRAWING2D.trace, "audioTrace", _view.audioPanel)
          .setProperty("LineColor", "Red")
          .setProperty("DrawLines", !0)
          .setProperty("NoRepeat", !1)
          .setProperty("LineWidth", 2),
        _view
          ._addElement(EJSS_INTERFACE.panel, "controlPanel", _view.appPanel)
          .setProperty("CSS", { display: "block" })
          .setProperty("Background", "rgba(224,224,224,1.0)")
          .setProperty("BorderStyle", "solid")
          .setProperty("BorderColor", "Gray")
          .setProperty("BorderWidth", 1),
        _view._addElement(
          EJSS_INTERFACE.panel,
          "firstRowPanel",
          _view.controlPanel
        ),
        _view
          ._addElement(EJSS_INTERFACE.panel, "buttonPanel", _view.firstRowPanel)
          .setProperty("Display", "inline-block"),
        _view
          ._addElement(
            EJSS_INTERFACE.twoStateButton,
            "runPauseButton",
            _view.buttonPanel
          )
          .setProperty("Tooltip", "Play/Pause")
          .setProperty(
            "ImageOnUrl",
            "/org/opensourcephysics/resources/controls/images/play.gif"
          )
          .setProperty(
            "ImageOffUrl",
            "/org/opensourcephysics/resources/controls/images/pause.gif"
          ),
        _view
          ._addElement(EJSS_INTERFACE.button, "resetButton", _view.buttonPanel)
          .setProperty("Tooltip", "Reset")
          .setProperty(
            "ImageUrl",
            "/org/opensourcephysics/resources/controls/images/reset.gif"
          ),
        _view
          ._addElement(
            EJSS_INTERFACE.checkBox,
            "measureCheck",
            _view.firstRowPanel
          )
          .setProperty("Text", "Measure"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "scalePanel", _view.firstRowPanel)
          .setProperty("Tooltip", "Y-axis minumum")
          .setProperty("Display", "inline-block"),
        _view._addElement(
          EJSS_INTERFACE.imageAndTextButton,
          "scaleFreqLabel",
          _view.scalePanel
        ),
        _view
          ._addElement(
            EJSS_INTERFACE.numberField,
            "scaleField",
            _view.scalePanel
          )
          .setProperty("Width", 45)
          .setProperty("Format", "0.00")
          .setProperty("Tooltip", "Amplude scale"),
        _view._addElement(
          EJSS_INTERFACE.panel,
          "aboutPanel",
          _view.tabbedPanel
        ),
        _view
          ._addElement(EJSS_INTERFACE.panel, "optionsPanel", _view.aboutPanel)
          .setProperty("Width", "80%")
          .setProperty("Background", "LightGray")
          .setProperty("BorderStyle", "solid")
          .setProperty("BorderColor", "Gray")
          .setProperty("Html", "<h2>Sound Analyzer PWA: FFT Options</h2>")
          .setProperty("BorderWidth", 1),
        _view._addElement(
          EJSS_INTERFACE.panel,
          "peaksPanel",
          _view.optionsPanel
        ),
        _view
          ._addElement(EJSS_INTERFACE.panel, "minDBPanel", _view.peaksPanel)
          .setProperty("Tooltip", "Y-axis minumum")
          .setProperty("Display", "inline-block"),
        _view._addElement(
          EJSS_INTERFACE.imageAndTextButton,
          "minDecible",
          _view.minDBPanel
        ),
        _view
          ._addElement(
            EJSS_INTERFACE.numberField,
            "minDecibleField",
            _view.minDBPanel
          )
          .setProperty("Width", 35)
          .setProperty("Format", "0"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "maxDBPanel", _view.peaksPanel)
          .setProperty("Tooltip", "Y-axis minumum")
          .setProperty("Display", "inline-block"),
        _view
          ._addElement(
            EJSS_INTERFACE.imageAndTextButton,
            "maxDecible",
            _view.maxDBPanel
          )
          .setProperty("Text", " max"),
        _view
          ._addElement(
            EJSS_INTERFACE.numberField,
            "maxDecibleField",
            _view.maxDBPanel
          )
          .setProperty("Width", 35)
          .setProperty("Format", "0"),
        _view
          ._addElement(EJSS_INTERFACE.checkBox, "peaksCheck", _view.peaksPanel)
          .setProperty("Tooltip", "Show freq. spectrum peaks"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "thresholdPanel", _view.peaksPanel)
          .setProperty("Tooltip", "Y-axis minumum")
          .setProperty("Display", "inline-block"),
        _view._addElement(
          EJSS_INTERFACE.imageAndTextButton,
          "thresholdDecible",
          _view.thresholdPanel
        ),
        _view
          ._addElement(
            EJSS_INTERFACE.numberField,
            "thresholdField",
            _view.thresholdPanel
          )
          .setProperty("Width", 45)
          .setProperty("Format", "0"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "minPanel", _view.optionsPanel)
          .setProperty("Tooltip", "Y-axis minumum")
          .setProperty("Display", "inline-block"),
        _view._addElement(
          EJSS_INTERFACE.imageAndTextButton,
          "minFreqLabel",
          _view.minPanel
        ),
        _view
          ._addElement(
            EJSS_INTERFACE.numberField,
            "minFreqField",
            _view.minPanel
          )
          .setProperty("Width", 45)
          .setProperty("Format", "0.0"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "maxPanel", _view.optionsPanel)
          .setProperty("Tooltip", "Y-axis minumum")
          .setProperty("Display", "inline-block"),
        _view
          ._addElement(
            EJSS_INTERFACE.imageAndTextButton,
            "maxFreqLabel",
            _view.maxPanel
          )
          .setProperty("Text", " max"),
        _view
          ._addElement(
            EJSS_INTERFACE.numberField,
            "maxFreqField",
            _view.maxPanel
          )
          .setProperty("Width", 45)
          .setProperty("Format", "0.0"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "ptsPanel", _view.optionsPanel)
          .setProperty("Display", "inline-block"),
        _view
          ._addElement(
            EJSS_INTERFACE.imageAndTextButton,
            "ptsLabel",
            _view.ptsPanel
          )
          .setProperty("Tooltip", "Number of points in sample."),
        _view
          ._addElement(EJSS_INTERFACE.comboBox, "ptsBox", _view.ptsPanel)
          .setProperty("Options", [256, 512, 1024, 2048, 4096, 8192])
          .setProperty("Multiple", !1)
          .setProperty("SelectedOptions", [1024]),
        _view
          ._addElement(EJSS_INTERFACE.checkBox, "mobileCheck", _view.ptsPanel)
          .setProperty("Tooltip", "Show mobile device view")
          .setProperty("Text", "Mobile")
          .setProperty("Font", "normal normal 1em "),
        _view
          ._addElement(EJSS_INTERFACE.panel, "aboutNarrative", _view.aboutPanel)
          .setProperty("Width", "90%")
          .setProperty(
            "Html",
            '<h2>About Microphone Sound Analyzer</h2> <h5>Developed by Wolfgang Christian at Davidson College using Easy JavaScript Simulations.</h5> <p> The Microphone Sound Analyzer JavaScript Progressive Web App (PWA) records the sound from a computer or mobile device microphone and displays its amplitude and frequency spectrum.  Users can vary the recording length by selecting the number of data points. The number of points must, however, be a power of 2 in oder to utilize the audio processor\'s  Fast Fourier Transform (FFT) to compute the sound&#39;s frequency spectrum.  Because the domain of  the computed frequency spectrum is usually too large for audio signals between 20 Hz to 20 kHz,  users can set the minimum and maximum values on the graph to display only the range of interest.</p> <p>The Microphone Sound Analyzer is designed for classroom demonstration and student experimentation.  It was developed using the Easy JavaScript Simulations (EjS) version 5.3 and is distributed as a  ready-to-run html page and requires only a browser with JavaScript support. This model runs on all platforms,  including mobile devices, that support the Media Devices API. </p> <p> <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices"> https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices</a> </p> <h2>About PWAs</h2> <p> On some operating system + browser combinations, a Progressive Web App can be installed on a user&#39;s home screen and run without an internet connection.  Safari and Google Chrome have different PWA and device capabilites on Apple OS X and Google Chrome has different capabilites on iOS and Android. For example, this PWA can be installed on Apple computers running OS X using the Safari browser but not using Chrome.  Furthermore, Apple molbile devices running iOS and iPadOS 13, allow microphone access using Safari but not using Chrome.  Fortunately, a Progressive Web App is just an html page that is stored locally and it can always be run in a browser even if it cannot be installed on the home screen. <button style="border-color: #2196F3" onclick="_model.showHelpFunction()">PWA Help</button> </p>     <figure>       <img class="centered" src="./MicrophoneSoundAnalyzer/Davidson.png" alt="Davidson College"/>       <figcaption style="text-align: center; font-weight: bold"></figcaption>     </figure>'
          ),
        _view
          ._addElement(EJSS_INTERFACE.panel, "audioApiPanel", _view.aboutPanel)
          .setProperty("Width", "90%")
          .setProperty("Html", "<h2>Test Audio API</h2>"),
        _view
          ._addElement(
            EJSS_INTERFACE.dataTable,
            "avDataTable",
            _view.audioApiPanel
          )
          .setProperty("Width", "80%")
          .setProperty("ColumnsWidth", 250)
          .setProperty("AddToTop", !1)
          .setProperty("NoRepeat", !1),
        _view._addElement(
          EJSS_INTERFACE.panel,
          "testAudioPanel",
          _view.audioApiPanel
        ),
        _view
          ._addElement(
            EJSS_INTERFACE.button,
            "audioPermissioButton",
            _view.testAudioPanel
          )
          .setProperty("Text", "Test Audio Access"),
        _view
          ._addElement(EJSS_INTERFACE.panel, "narrativePanel", _view._topFrame)
          .setProperty(
            "Html",
            '<h3>Questions:</h3> <p>Instructions: When the web page loads the software will ask for access to the device microphone. Click <em>allow</em>. Make some sound (sing, talk, whistle) and click the play button to see the software at work. A second click on the play button will capture a segment of data.</p> <ol> <li>Capture a sound sample while whistling a single note (or use a tuning fork if you have one). Describe the waveform of the amplitude (bottom graph) of this sound.</li> <li>The bottom graph is an amplitude versus time (in milliseconds) graph. Click the <em>measure</em> checkbox. Adjust the bars to measure the period of the wave (it is more accurate to measure the period of several waves and divide by the number of waves to get the period of one wave). What is this whistle&#39;s period in seconds?</li> <li>Use the <em>peaks</em>. checkbox to find the main frequency of your whistle (upper graph). What is the frequency? (Note: You may notice two peaks in this part. Try taking a sound sample while blowing through your lips without making a whistle. Can you now explain what the lower peak is showing?)</li> <li>Divide the period of the wave into one to get the frequency (change to seconds first). Does the frequency as calculated from the period match the frequency (in Hz) on the top graph?</li> <li>Now capture a sound of your voice or a musical instrument playing the same tone as your whistle. What is different about the two graphs from those of a whistle or tuning fork? What is similar?</li> <li>Use the peak checkbox and the period on the lower graph to compare the highest frequency shown in the top graph. How do they compare?</li> <li>The lower frequency peaks are overtones. Are they harmonic? How do you know?</li> <li>Now have a lab partner sing the same note (or use a different instrument). How does their waveform and frequency spectrum differ from yours?</li> <li>Suppose a clarinet and a trumpet both play the same note (have the same fundamental frequency). What would be different and what would be the same for the set of graphs for each. Why is it that you can still tell them apart, even though they are playing the same note?</li> <li>Write a brief definition of each of the following: Fourier Analysis, Fourier Synthesis, spectrogram, harmonics, overtones, timbre.</li> </ol> <h5>Questions by Kyle Forinash.  See <em>Sound: An Interactive eBook</em> for additonal additional curricular material and simulations. <br/><br/> <a href="https://www.compadre.org/books/SoundBook"> https://https://www.compadre.org/books/SoundBook</a> </h5>'
          )
          .setProperty("Visibility", !1)
          .setProperty("Display", "none");
    }),
    _view
  );
}
var _model, _scorm;
window.addEventListener(
  "load",
  function () {
    (_model = new MicrophoneSoundAnalyzerPWA(
      "_topFrame",
      "_ejs_library/",
      null
    )),
      "undefined" != typeof _isApp && _isApp && _model.setRunAlways(!0),
      (TextResizeDetector.TARGET_ELEMENT_ID = "_topFrame"),
      (TextResizeDetector.USER_INIT_FUNC = function () {
        var iBase = TextResizeDetector.addEventListener(function (e, args) {
          _model._fontResized(args[0].iBase, args[0].iSize, args[0].iDelta);
        }, null);
        _model._fontResized(iBase);
      }),
      _model.onload();
  },
  !1
);
